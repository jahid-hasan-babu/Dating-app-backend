// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  email            String?         @unique
  password         String?
  accountSetup     Boolean?        @default(false)
  role             UserRoleEnum    @default(USER)
  status           UserStatus      @default(ACTIVATE)
  isVerified       veriedStatus    @default(NEW)
  googleId         String?
  facebookId       String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  fcpmToken        String?
  profile          Profile?
  sentMessages     Message[]       @relation("SentMessages")
  receivedMessages Message[]       @relation("ReceivedMessages")
  channelsAsUser1  Channel[]       @relation("UserChannel1")
  channelsAsUser2  Channel[]       @relation("UserChannel2")
  notifications    Notifications[] @relation("Notifications")

  @@map("users")
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  otp       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("otps")
}

model Profile {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  fullName     String?
  username     String?
  phoneNumber  String?
  profileImage String?
  locationLat  String?
  locationLang String?
  country      String?
  city         String?
  age          String?
  gender       GenderStatus?
  dateOfBirth  String?
  height       String?
  interests    Json[]
  about        String?
  relationship RelationStatus?
  language     String?
  work         String?
  gallery      Json[]
  isVerified   veriedStatus    @default(NEW)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  user         User?            @relation(fields: [userId], references: [id])
  userId       String          @unique @db.ObjectId
  customerId   String

  @@map("profiles")
}

model Favorite {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userID          String   @db.ObjectId
  favoritedUserId String   @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("favorites")
}

model Notifications {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String   @db.ObjectId
  title      String
  body       String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [receiverId], references: [id], name: "Notifications")
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String?
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  replyId    String?  @db.ObjectId
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender    User    @relation("SentMessages", fields: [senderId], references: [id])
  receiver  User    @relation("ReceivedMessages", fields: [receiverId], references: [id])
  channelId String  @db.ObjectId
  channel   Channel @relation(fields: [channelId], references: [id])

  @@map("messages")
}

model Channel {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  participant1Id String   @db.ObjectId
  participant2Id String   @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  participant1 User      @relation("UserChannel1", fields: [participant1Id], references: [id])
  participant2 User      @relation("UserChannel2", fields: [participant2Id], references: [id])
  messages     Message[]

  @@unique([participant1Id, participant2Id])
  @@map("channels")
}

enum ChannelType {
  PRIVATE
  PUBLIC
}

model Plan {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  planName        String
  duration        String
  price           Float
  productId       String // The Stripe product ID
  description     String?
  priceId         String // The Stripe price ID
  paypalProductId String? // The PayPal product ID
  paypalPlanId    String? // The PayPal plan ID
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("plans")
}

model Subscription {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  userID               String    @db.ObjectId
  planID               String    @db.ObjectId // Reference to plan
  stripeSubscriptionId String?
  paypalSubscriptionId String?
  status               String // "active", "canceled", etc.
  startDate            DateTime  @default(now())
  endDate              DateTime
  renewedAt            DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@map("subscriptions")
}

model Payment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userID         String   @db.ObjectId
  totalAmount    Float
  paymentMethod  String
  cardName       String
  securityCode   String
  billingZipCode String // Changed DateTime to String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Date {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  personOneID String   @db.ObjectId
  personTwoID String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRoleEnum {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVATE
  INACTIVATE
  BLOCKED
}

enum GenderStatus {
  MALE
  FEMALE
}

enum RelationStatus {
  SINGLE
  MARRIED
}

enum veriedStatus {
  NEW
  VERIFIED
}
